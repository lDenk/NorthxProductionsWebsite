
@{
    ViewBag.Title = "Videos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using northxproductions.Models
@model NxVideoProjectsListModel
<div class="my-video-page-container">
    <h2>
        Projects
    </h2>
    <div id="videoProjectNames">
        @foreach (NxVideoProjectModel project in Model.Projects)
            {
            <span class="videoProjectName">
                @project.ProjectName
            </span>
        }
    </div>
    <div>
        <div>
            @foreach (NxVideoProjectModel project in Model.Projects)
            {
                <div class="noDisp" id="@project.ProjectName.Replace(" ", String.Empty)">
                    <span class="separator"></span>
                    @foreach (NxVideo video in project.Project)
                    {
                        <span class="separator"></span>
                        <span class="my-video-table-videoname" id="@video.Embed">
                            @video.Name
                        </span>
                        <span class="separator"></span>
                    }
                    <span class="separator"></span>
                </div>
            }
            <iframe id="vid-popup-iframe" class="my-vid-popup-iframe"
                    width="640" height="360"
                    src=""
                    frameborder="0"
                    allowfullscreen></iframe>
        </div>
    </div>
    <div id="videosContainer">

    </div>
</div>

<script>
    /**
    * Load the API's client and auth2 modules.
    * Call the initClient function after the modules load.
    */
    function handleClientLoad() {
        gapi.load("client", initClient);
    }

    function initClient() {
        var request = gapi.client.request({
            "method": "GET",
            "path": "/youtube/v3/playlists",
            "params": { "part": "snippet,contentDetails", "key": "AIzaSyBp7ob9Yt1ENwk7GBtskouk-rsROfLEufQ", "channelId": "UCYIDzVDq37pkTk6PT-yM39g" }
        });
        loadPlaylists(request);
    }

    function loadPlaylists(request) {
        // Summary: Load all of the playlists for the youtube channel and setup the HTML structure
        // request: google api created request object for retreiving the playlists

        request.execute(function (response) {
            var elContainer = document.getElementById("videosContainer");
            var request, elPlaylistContainer, elPlaylistTitle, elVideosContainer;
            response.items.forEach(function (item) {

                elPlaylistContainer = document.createElement("div");
                elPlaylistContainer.setAttribute("id", "playlist-" + item.id);
                elContainer.appendChild(elPlaylistContainer);

                elPlaylistTitle = this.createPlaylistTitle(item.snippet.title, item.id);
                elPlaylistContainer.appendChild(elPlaylistTitle);

                elVideosContainer = document.createElement("div");
                elVideosContainer.setAttribute("id", "videos-" + item.id);
                elPlaylistContainer.appendChild(elVideosContainer);

                elPlaylistContainer.setAttribute("data-collapsed", "1");
                elPlaylistContainer.setAttribute("class", "playlist");

                request = gapi.client.request({
                    "method": "GET",
                    "path": "/youtube/v3/playlistItems",
                    "params": { "part": "contentDetails", "key": "AIzaSyBp7ob9Yt1ENwk7GBtskouk-rsROfLEufQ", "playlistId": item.id }
                });
                loadVideos(request, elVideosContainer);
            });
        }, function (error) {
            console.log(error);
        });
    }

    function loadVideos(request, elVideosContainer) {
        // Summary: Load all of the videos for each playlist
        // request: google api created request object for retreiving the videos
        // elVideosContainer: element to hold all of the individual videos

        request.execute(function (response) {
            var elVideo, elPlaylistContainer;
            response.items.forEach(function (item) {
                elVideo = document.createElement("iframe");
                elVideo.width = "200";
                elVideo.height = "100";
                elVideo.src = "//www.youtube.com/embed/" + item.contentDetails.videoId;
                elVideo.frameBorder = "0";

                elVideosContainer.appendChild(elVideo);
            });
        }, function (error) {
            console.log(error);
        });
    }

    function togglePlaylist(event, params) {
        // Summary: Expand/collapse the playlist via the data-collapsed attribute and maxHeight styling
        // event: The event that is triggered
        // params: Object passed in in this format: { playlistId: "thePlaylistId" }

        var playlistId = params.playlistId;

        var elVideosContainer = document.getElementById("videos-" + playlistId);
        var elPlaylistContainer = document.getElementById("playlist-" + playlistId);
        var collapse = elVideosContainer.getAttribute("data-collapsed");
        if (elPlaylistContainer.getAttribute("data-collapsed") === "1") {
            elPlaylistContainer.setAttribute("data-collapsed", "0");

            var playlistHeight = elVideosContainer.offsetHeight;
            elPlaylistContainer.style.maxHeight = (playlistHeight + 20) + "px";
        }
        else {
            elPlaylistContainer.setAttribute("data-collapsed", "1");
            elPlaylistContainer.style.maxHeight = "";
        }
    }

    function createPlaylistTitle(titleText, playlistId) {
        // Summary: Create HTML for playlist title
        // titleText: The text for the title
        // playlistId: The youtube playlist id

        // Use a span, so custom font is applied.
        var elTitle = document.createElement("span");
        elTitle.innerHTML = titleText;

        var elTitleContainer = document.createElement("div");
        elTitleContainer.addEventListener("click", this.functionDelegate(this.togglePlaylist, { playlistId: playlistId }));
        elTitleContainer.appendChild(elTitle);

        return elTitleContainer;
    }
</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script async defer src="https://apis.google.com/js/api.js"
        onload="this.onload=function(){};handleClientLoad()"
        onreadystatechange="if (this.readyState === 'complete') this.onload()">
</script>

<script>
    var videoProjectNames = document.getElementsByClassName("videoProjectName");
    for (var i = 0; i < videoProjectNames.length; i++) {
        videoProjectNames[i].addEventListener("click", functionDelegate(selectProject));
    }

    // Show the table for the Parachute project
    this.elSelectedProjectTable = document.getElementById("Parachute");
    this.elSelectedProjectName = videoProjectNames[0];
    this.switchProjects(this.elSelectedProjectTable.id, this.elSelectedProjectName);

    var videoNames = document.getElementsByClassName("my-video-table-videoname");
    for (var i = 0; i < videoNames.length; i++) {
        videoNames[i].addEventListener("click", functionDelegate(selectVideo));
    }

    this.elSelectedVideoName = videoNames[0];
    this.switchVideos(this.elSelectedVideoName);
    this.showPopup(this.elSelectedVideoName.id);

    function selectVideo(event) {
        // Summary: Select video to watch.
        if (event.target === this.elSelectedVideoName) {
            return;
        }

        this.showPopup(event.target.id);
        this.switchVideos(event.target);
    }

    function switchVideos(elTarget)
    {
        // Summary: Switch/set selected video
        // elTarget: The target element (video name) that we're switching to/setting
        this.elSelectedVideoName.setAttribute("data-selected", "false");
        this.elSelectedVideoName = elTarget;
        this.elSelectedVideoName.setAttribute("data-selected", "true");
    }

    function showPopup(source) {
        // Summary: Show video popup.
        // source: String representing the source of the video

        document.getElementById('vid-popup-iframe').src = source;
    }

    function selectProject(event) {
        // Summary: Hide previously selected project video names and show currently selected project video names.
        var elementId = event.target.innerText.split(" ").join("");
        if (elementId === this.elSelectedProjectTable.id) {
            return;
        }

        this.switchProjects(elementId, event.target);
    }

    function switchProjects(projectId, elTarget) {
        // Summary: Switch/set selected projects.
        // projectId: The id of the project table to display
        // elTarget: The target element (project name) that we're switching to/setting

        this.elSelectedProjectName.setAttribute("data-selected", "false");
        this.elSelectedProjectName = elTarget;
        this.elSelectedProjectName.setAttribute("data-selected", "true");

        this.elSelectedProjectTable.setAttribute("class", "noDisp");
        this.elSelectedProjectTable = document.getElementById(projectId);
        this.elSelectedProjectTable.setAttribute("class", "videoNames");
    }

    var _this = this;
    function functionDelegate(delegate, params) {
        // Summary: Return a function that will call the delegate with the correct context.
        // delegate: function to call when event is triggered.
        return function (event) {
            delegate.call(_this, event, params);
        }
    }
</script>
